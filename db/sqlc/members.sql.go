// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: members.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMember = `-- name: CreateMember :one

INSERT  INTO members (
                       first_name,
                       last_name,
                       status,
                       comment

) VALUES (
          $1, $2, $3, $4
          -- return all values of alL columns
         ) RETURNING member_id, first_name, last_name, created_at, status, comment
`

type CreateMemberParams struct {
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Status    MemberStatus   `json:"status"`
	Comment   sql.NullString `json:"comment"`
}

// Create table entries and return one object after creation
func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember,
		arg.FirstName,
		arg.LastName,
		arg.Status,
		arg.Comment,
	)
	var i Member
	err := row.Scan(
		&i.MemberID,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.Status,
		&i.Comment,
	)
	return i, err
}

const getMember = `-- name: GetMember :one
SELECT member_id, first_name, last_name, created_at, status, comment FROM members
WHERE member_id = $1 LIMIT 1
`

func (q *Queries) GetMember(ctx context.Context, memberID uuid.UUID) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, memberID)
	var i Member
	err := row.Scan(
		&i.MemberID,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.Status,
		&i.Comment,
	)
	return i, err
}
