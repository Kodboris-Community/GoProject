// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type MemberStatus string

const (
	MemberStatusActive   MemberStatus = "active"
	MemberStatusInactive MemberStatus = "inactive"
	MemberStatusDormant  MemberStatus = "dormant"
)

func (e *MemberStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MemberStatus(s)
	case string:
		*e = MemberStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MemberStatus: %T", src)
	}
	return nil
}

type NullMemberStatus struct {
	MemberStatus MemberStatus `json:"member_status"`
	Valid        bool         `json:"valid"` // Valid is true if MemberStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMemberStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MemberStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MemberStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMemberStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MemberStatus), nil
}

type Member struct {
	MemberID  uuid.UUID      `json:"member_id"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	CreatedAt sql.NullTime   `json:"created_at"`
	Status    MemberStatus   `json:"status"`
	Comment   sql.NullString `json:"comment"`
}
